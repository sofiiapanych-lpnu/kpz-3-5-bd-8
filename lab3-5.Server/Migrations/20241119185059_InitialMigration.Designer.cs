// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using lab3_5.Server.Models;

#nullable disable

namespace lab3_5.Server.Migrations
{
    [DbContext(typeof(DeliverycourierserviceContext))]
    [Migration("20241119185059_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("lab3_5.Server.Models.Client", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("integer")
                        .HasColumnName("person_id");

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    b.HasKey("PersonId")
                        .HasName("client_pkey");

                    b.HasIndex("AddressId");

                    b.ToTable("client", (string)null);
                });

            modelBuilder.Entity("lab3_5.Server.Models.Courier", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("integer")
                        .HasColumnName("person_id");

                    b.Property<string>("LicencePlate")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("licence_plate");

                    b.Property<int?>("TotalDeliveries")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("total_deliveries");

                    b.HasKey("PersonId")
                        .HasName("courier_pkey");

                    b.HasIndex(new[] { "LicencePlate" }, "unique_licence_plate")
                        .IsUnique();

                    b.ToTable("courier", (string)null);
                });

            modelBuilder.Entity("lab3_5.Server.Models.CourierPerformance", b =>
                {
                    b.Property<TimeSpan?>("AvgDeliveryTime")
                        .HasColumnType("interval")
                        .HasColumnName("avg_delivery_time");

                    b.Property<string>("CourierName")
                        .HasColumnType("text")
                        .HasColumnName("courier_name");

                    b.Property<long?>("DeliveryRank")
                        .HasColumnType("bigint")
                        .HasColumnName("delivery_rank");

                    b.Property<int?>("PersonId")
                        .HasColumnType("integer")
                        .HasColumnName("person_id");

                    b.Property<long?>("TotalDeliveries")
                        .HasColumnType("bigint")
                        .HasColumnName("total_deliveries");

                    b.ToTable((string)null);

                    b.ToView("courier_performance", (string)null);
                });

            modelBuilder.Entity("lab3_5.Server.Models.Delivery", b =>
                {
                    b.Property<int>("DeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("delivery_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DeliveryId"));

                    b.Property<TimeSpan?>("ActualDuration")
                        .HasColumnType("interval")
                        .HasColumnName("actual_duration");

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    b.Property<int?>("CourierId")
                        .HasColumnType("integer")
                        .HasColumnName("courier_id");

                    b.Property<TimeSpan?>("DesiredDuration")
                        .HasColumnType("interval")
                        .HasColumnName("desired_duration");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_time");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("start_time");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'pending'::character varying");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("integer")
                        .HasColumnName("warehouse_id");

                    b.HasKey("DeliveryId")
                        .HasName("delivery_pkey");

                    b.HasIndex("AddressId");

                    b.HasIndex("CourierId");

                    b.HasIndex("OrderId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("delivery", (string)null);
                });

            modelBuilder.Entity("lab3_5.Server.Models.DeliveryAddress", b =>
                {
                    b.Property<int>("DeliveryAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("delivery_address_id")
                        .HasDefaultValueSql("nextval('address_address_id_seq'::regclass)");

                    b.Property<string>("ApartmentNumber")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("apartment_number");

                    b.Property<string>("BuildingNumber")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("building_number");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("country");

                    b.Property<int?>("Floor")
                        .HasColumnType("integer")
                        .HasColumnName("floor");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("street");

                    b.HasKey("DeliveryAddressId")
                        .HasName("address_pkey");

                    b.ToTable("delivery_address", (string)null);
                });

            modelBuilder.Entity("lab3_5.Server.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderId"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<decimal>("Cost")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("cost");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("OrderId")
                        .HasName("Order_pkey");

                    b.HasIndex("ClientId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("lab3_5.Server.Models.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("person_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PersonId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone_number");

                    b.HasKey("PersonId")
                        .HasName("person_pkey");

                    b.HasIndex(new[] { "PhoneNumber" }, "unique_phone_number")
                        .IsUnique();

                    b.ToTable("person", (string)null);
                });

            modelBuilder.Entity("lab3_5.Server.Models.Transport", b =>
                {
                    b.Property<string>("LicencePlate")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("licence_plate");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("model");

                    b.Property<string>("TransportType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("transport_type");

                    b.HasKey("LicencePlate")
                        .HasName("transport_pkey");

                    b.ToTable("transport", (string)null);
                });

            modelBuilder.Entity("lab3_5.Server.Models.Warehouse", b =>
                {
                    b.Property<int>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("warehouse_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WarehouseId"));

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("contact_number");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("WarehouseId")
                        .HasName("warehouse_pkey");

                    b.ToTable("warehouse", (string)null);
                });

            modelBuilder.Entity("lab3_5.Server.Models.Client", b =>
                {
                    b.HasOne("lab3_5.Server.Models.DeliveryAddress", "Address")
                        .WithMany("Clients")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("client_address_id_fkey");

                    b.HasOne("lab3_5.Server.Models.Person", "Person")
                        .WithOne("Client")
                        .HasForeignKey("lab3_5.Server.Models.Client", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("client_person_id_fkey");

                    b.Navigation("Address");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("lab3_5.Server.Models.Courier", b =>
                {
                    b.HasOne("lab3_5.Server.Models.Transport", "LicencePlateNavigation")
                        .WithOne("Courier")
                        .HasForeignKey("lab3_5.Server.Models.Courier", "LicencePlate")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("courier_licence_plate_fkey");

                    b.HasOne("lab3_5.Server.Models.Person", "Person")
                        .WithOne("Courier")
                        .HasForeignKey("lab3_5.Server.Models.Courier", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("courier_person_id_fkey");

                    b.Navigation("LicencePlateNavigation");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("lab3_5.Server.Models.Delivery", b =>
                {
                    b.HasOne("lab3_5.Server.Models.DeliveryAddress", "Address")
                        .WithMany("Deliveries")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("delivery_address_id_fkey");

                    b.HasOne("lab3_5.Server.Models.Courier", "Courier")
                        .WithMany("Deliveries")
                        .HasForeignKey("CourierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("delivery_courier_id_fkey");

                    b.HasOne("lab3_5.Server.Models.Order", "Order")
                        .WithMany("Deliveries")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("delivery_order_id_fkey");

                    b.HasOne("lab3_5.Server.Models.Warehouse", "Warehouse")
                        .WithMany("Deliveries")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("delivery_warehouse_id_fkey");

                    b.Navigation("Address");

                    b.Navigation("Courier");

                    b.Navigation("Order");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("lab3_5.Server.Models.Order", b =>
                {
                    b.HasOne("lab3_5.Server.Models.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("lab3_5.Server.Models.Client", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("lab3_5.Server.Models.Courier", b =>
                {
                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("lab3_5.Server.Models.DeliveryAddress", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("lab3_5.Server.Models.Order", b =>
                {
                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("lab3_5.Server.Models.Person", b =>
                {
                    b.Navigation("Client");

                    b.Navigation("Courier");
                });

            modelBuilder.Entity("lab3_5.Server.Models.Transport", b =>
                {
                    b.Navigation("Courier");
                });

            modelBuilder.Entity("lab3_5.Server.Models.Warehouse", b =>
                {
                    b.Navigation("Deliveries");
                });
#pragma warning restore 612, 618
        }
    }
}
